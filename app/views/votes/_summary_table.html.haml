%table{:cellspacing => 0}
  %tr
    %th Ip address
    %th Days
    %th Location
    %th Place
    %th Created
    %th{:colspan => 2} Community
    %th{:colspan => 2} Website
    %th Support
    -# %th
    %th Created
    -# %th Updated
    %th{:style => "text-align: right"} Sec
    %th{:style => "text-align: right"} #vt
    %th ID
    %th User
    %th Referrer
    %th{:style => "text-align: left; padding-left: 2em"} Agent
  
  - background = "; background: #eee"
  - last_created = @votes[0].created_at
  - count_dittos = 0
  -# Create an extra vote before (to initialize the logic) and after (to make the last vote display) actual votes:
  - previous_vote = @votes[0]
  - @votes << Vote.new(:id => "0", :community_id => "0", :website_id => "0", :support => "0", :ip_address => "not an ip address")
  
  - for vote in @votes
    -# We display info for *previous_vote* after finding out if vote (i.e. the next vote) is not a repeat.
    -# We are going through votes in reverse chronological order, so "previous_vote" in this routine was cast LATER in real time than "vote".
    - unless vote.ip_address == previous_vote.ip_address && vote.community_id == previous_vote.community_id && vote.website_id == previous_vote.website_id && vote.support == previous_vote.support && (previous_vote.created_at - vote.created_at) < 10
      
      - if ip_record = Ip.find_by_ip_address(previous_vote.ip_address)
        - found_flag = TRUE
      - else
        - found_flag = FALSE
      
      %tr{:style => "white-space: nowrap" + background}
        %td
          - if found_flag
            = link_to previous_vote.ip_address, '/ips/votes/' + ip_record.id.to_s
          - else
            = h previous_vote.ip_address
        %td{:style => "text-align: right; padding-right: 1em"}= previous_vote.days.to_i if previous_vote.days
        %td
          - if found_flag
            = ip_record.country
            = ip_record.region
            = truncate(ip_record.city, :length => 12, :omission => '\\')
        %td= previous_vote.place if previous_vote.place
        %td= previous_vote.place_created_at.strftime("%Y-%m-%d") if previous_vote.place_created_at
        %td{:style => "text-align: right"}
          - if community = Community.find_by_id(previous_vote.community_id)
            = link_to(previous_vote.community_id.to_s, community_votes_path(community.idstring))
        %td{:style => "padding-left: 0.5em; padding-right: 1em"}
          - if community
            = link_to(truncate(community.short_name, :length => 20, :omission => '\\'), "/" + community.idstring)
        %td{:style => "text-align: right"}= previous_vote.website_id
        %td{:style => "padding-left: 0.5em"}
          - if website = Website.find_by_id(previous_vote.website_id)
            = truncate(website.title, :length => 20, :omission => '\\')
        %td{:style => "text-align: right; padding-right: 1em"}
          - if previous_vote.support
            = number_with_precision(previous_vote.support, :precision => 0) + '%'
        %td{:style => "text-align: center"}= previous_vote.created_at.to_s(:YmdHMS)
        %td{:style => "text-align: right"}= (last_created - previous_vote.created_at).round
        %td{:style => "text-align: right"}= count_dittos
        %td{:style => "padding-left: 1em"}= previous_vote.id
        %td{:style => "padding-left: 1em"}= previous_vote.user_id
        %td{:style => "padding-left: 1em"}= previous_vote.referrer
        %td{:style => "padding-left: 1em"}= previous_vote.agent
        
        - count_dittos = 0
        - last_created = vote.created_at
      
      -# Toggle between shaded rows and non-shaded rows for each voting session = same ip with no gap over 1 hour:
      - unless vote.ip_address == previous_vote.ip_address && (previous_vote.created_at - vote.created_at) < 60*60
        - if background == ""
          - background = "; background: #eee"
        - else
          - background = ""
    
    - count_dittos += 1
    - previous_vote = vote